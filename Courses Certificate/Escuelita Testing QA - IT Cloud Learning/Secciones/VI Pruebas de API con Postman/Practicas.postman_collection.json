{
	"info": {
		"_postman_id": "debe49ac-e2d6-48a3-90ba-7116fe6249e8",
		"name": "Practicas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39752404"
	},
	"item": [
		{
			"name": "Creacion de Usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response time is within an acceptable range\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a valid JSON body\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User ID is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"User ID should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid email format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'createdAt' field is a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be a valid date format\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Luciano\",\r\n    \"job\": \"QA Expert\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta de Usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>Email</th>\r",
							"        <th>First Name</th>\r",
							"        <th>Last Name</th>\r",
							"        <th>Avatar</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.data.id}}</td>\r",
							"        <td>{{response.data.email}}</td>\r",
							"        <td>{{response.data.first_name}}</td>\r",
							"        <td>{{response.data.last_name}}</td>\r",
							"        <td>{{response.data.avatar}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data object has expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.have.property('id');\r",
							"    pm.expect(responseData.data).to.have.property('email');\r",
							"    pm.expect(responseData.data).to.have.property('first_name');\r",
							"    pm.expect(responseData.data).to.have.property('last_name');\r",
							"    pm.expect(responseData.data).to.have.property('avatar');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Support object is present and contains expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.support).to.exist;\r",
							"    pm.expect(responseData.support.url).to.exist;\r",
							"    pm.expect(responseData.support.text).to.exist;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				},
				"description": "This API endpoint makes an HTTP GET request to retrieve user information from the \"reqres.in\" API. The response will be in JSON format and will contain data related to the user, including their ID, email, first name, last name, and avatar. Additionally, the response will include support information with URL and text.\n\n### Request\n\n- Method: GET\n    \n- Endpoint: [https://reqres.in/api/users/2](https://reqres.in/api/users/2)\n    \n\n### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- { \"data\": { \"id\": 0, \"email\": \"\", \"first_name\": \"\", \"last_name\": \"\", \"avatar\": \"\" }, \"support\": { \"url\": \"\", \"text\": \"\" }}"
			},
			"response": []
		},
		{
			"name": "Demoblaze Consulta de Productos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.demoblaze.com/entries",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"entries"
					]
				}
			},
			"response": []
		}
	]
}