{
	"info": {
		"_postman_id": "bf005082-cc12-4be4-b36e-b0293ccc468b",
		"name": "DemoBlaze API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39752404"
	},
	"item": [
		{
			"name": "API-01: Listado Completo Portatiles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>Title</th>\r",
							"        <th>Category</th>\r",
							"        <th>Description</th>\r",
							"        <th>Price</th>\r",
							"    </tr>\r",
							"    \r",
							"    {{#each response.Items}}\r",
							"        <tr>\r",
							"            <td>{{id}}</td>\r",
							"            <td>{{title}}</td>\r",
							"            <td>{{cat}}</td>\r",
							"            <td>{{desc}}</td>\r",
							"            <td>{{price}}</td>\r",
							"        </tr>\r",
							"    {{/each}}\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response schema includes expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.Items).to.be.an('array');\r",
							"    \r",
							"    responseData.Items.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('title');\r",
							"        pm.expect(item).to.have.property('cat');\r",
							"        pm.expect(item).to.have.property('desc');\r",
							"        pm.expect(item).to.have.property('price');\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"cat\": \"notebook\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/bycat",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"bycat"
					]
				}
			},
			"response": []
		},
		{
			"name": "API-03: Busqueda sin Categoria Asignada",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required schema - Items array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.Items).to.exist.and.to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Items array is present and is an empty array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.Items).to.exist.and.to.be.an('array').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"cat\": \"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/bycat",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"bycat"
					]
				}
			},
			"response": []
		},
		{
			"name": "API-04: Validar Categoria no Disponible",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.Items).to.be.an('array');\r",
							"    \r",
							"    responseData.Items.forEach(function(item) {\r",
							"        pm.expect(item.cat).to.exist;\r",
							"        pm.expect(item.desc).to.exist;\r",
							"        pm.expect(item.id).to.exist;\r",
							"        pm.expect(item.img).to.exist;\r",
							"        pm.expect(item.price).to.exist;\r",
							"        pm.expect(item.title).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    responseData.Items.forEach(function(item) {\r",
							"        pm.expect(item.price).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response content type is 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"cat\": \"consolas_gaming\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/bycat",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"bycat"
					]
				}
			},
			"response": []
		},
		{
			"name": "API-010: Validar normalización de categorías",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Items array is present and empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.Items).to.exist.and.to.be.an('array').that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"cat\": \"NOTEBOOK\"}\r\n//{\"cat\": \"Notebook\"}\r\n//{\"cat\": \"notebook\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/bycat",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"bycat"
					]
				}
			},
			"response": []
		},
		{
			"name": "API-011: Errores Ortograficos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required schema - Items array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.Items).to.exist.and.to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Items array should not be empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.Items).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"cat\": \"notebok\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/bycat",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"bycat"
					]
				}
			},
			"response": []
		}
	]
}